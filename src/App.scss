// TODO right now this important several times, reduce to just one inclusion

/**
 * For now we're importing some stuff from the internet, like fonts. For sure
 *  this can be optimized by having them locally and changing paths here. But
 *  right now this wasn't important for me.
 */
@import url("https://fonts.googleapis.com/css?family=Titillium+Web&display=swap"); // import page font TODO to theme

/**
 * By defining a theming file (which defines basic SCSS-vars) we can use different
 *  themes. Note that this doesn't support theme-change during runtime. That might
 *  be a point on the TODO-list (or not) for later.
 * Just make one line below active, while having the rest out-commented.
 */
@import 'themes/theme-light';
//@import 'themes/theme-dark';


/**
 * Custom Properties vs. SCSS-vars
 *
 * Focus here is on custom properties. They allow use to share variables w/o the
 *  need important them in each component like with SCSS-vars (if they're defined
 *  in a shared file).
 * You can also change custom properties during runtime, while SCSS-vars only affect
 *  things when you build the final code.
 * So the point here is to use custom properties between components and to use
 *  SCSS-vars mainly in a component itself.
 */
:root {
    --bg-color               : #{$themeBg};
    --bg-color-dark          : #{darken($themeBg, $colorVariation)};
    --bg-color-light         : #{lighten($themeBg, $colorVariation)};
    --fg-color               : #{$themeFg};
    --font-main              : 'Titillium Web', sans-serif; // TODO to/from theme
    --font-size              : 16px; // TODO to/from theme
    --element-bg-color       : #{fade-out($themeFg, .85)};
    --element-bg-color-alpha : #{fade-out($themeFg, .95)};
    --text-color             : #{$themeText};
    --text-color-alpha       : #{fade-out($themeText, .5)};
    --text-color-light       : #{lighten($themeText, $colorVariation)};
    --text-color-inverse     : #{$themeTextInverse};
    --text-shadow-dark       : 0 0 10px #{fade-out($themeShadow, 0)}; // TODO themeShadow isn't ideal at this point, we need a real shadow and a shadow as contrast to background
    --box-shadow-dark        : 0 10px 20px rgba(0, 0, 0, .25); // TODO themeShadow isn't ideal at this point, we need a real shadow and a shadow as contrast to background // #{fade-out($themeShadow, .75)};
    --primary-color          : #{$themePrimary};
    --primary-color-alpha    : #{fade-out($themePrimary, .5)};
    --primary-color-light    : #{lighten($themePrimary, $colorVariation)};
    --primary-color-dark     : #{darken($themePrimary, $colorVariation)};
    --primary-color-lighter  : #{lighten($themePrimary, $intenseColorVariation)};
    --primary-color-darker   : #{darken($themePrimary, $intenseColorVariation)};
    --primary-text-color     : #{$themePrimaryText};
    --secondary-color        : #{$themeSecondary};
    --secondary-color-alpha  : #{fade-out($themeSecondary, .5)};
    --secondary-color-light  : #{lighten($themeSecondary, $colorVariation)};
    --secondary-color-dark   : #{darken($themeSecondary, $colorVariation)};
    --secondary-color-lighter: #{lighten($themeSecondary, $intenseColorVariation)};
    --secondary-color-darker : #{darken($themeSecondary, $intenseColorVariation)};
    --secondary-text-color   : #{$themeSecondaryText};
    --positive-color         : #{$positive};
    --positive-color-alpha   : #{fade-out($positive, .5)};
    --positive-color-light   : #{lighten($positive, $colorVariation)};
    --positive-color-dark    : #{darken($positive, $colorVariation)};
    --positive-color-lighter : #{lighten($positive, $intenseColorVariation)};
    --positive-color-darker  : #{darken($positive, $intenseColorVariation)};
    --positive-text-color    : #{$themeSecondaryText};
    --negative-color         : #{$negative};
    --negative-color-alpha   : #{fade-out($negative, .5)};
    --negative-color-light   : #{lighten($negative, $colorVariation)};
    --negative-color-dark    : #{darken($negative, $colorVariation)};
    --negative-color-lighter : #{lighten($negative, $intenseColorVariation)};
    --negative-color-darker  : #{darken($negative, $intenseColorVariation)};
    --negative-text-color    : #{$themeSecondaryText};
    --overlay-dark           : #{fade-out($themeBg, .5)};
    --bar-gradient           : linear-gradient(
        180deg,
        #{change-color($themeShadow, $alpha:  .5 )}   0%,
        #{change-color($themeShadow, $alpha:  .25)}  75%,
        #{change-color($themeShadow, $alpha: 0   )} 100%);
    --animation-duration     : 250ms;
    --animation-duration-fast: 175ms;
    --animation-duration-slow: 375ms;


    --debug-color           : rgba(255,0,255,.25);
}

/**
 * Globally shared SCSS, including global variables and mixins.
 * TODO:
 * - later, split into small parts and import
 */

// BREAKPOINTS
$xs: 0;
$sm: 600px;
$md: 768px;
$lg: 1024px;
$breakPoints: 'xs', 'sm', 'md', 'lg';

// Z-INDEX
// TODO make theme/custom-props out of it?
$z-content: 0;     // used for normal page content. range 0 - 999
$z-float  : 1000;  // used for page content that needs to be above normal content. range 1000 - 1999
$z-menu   : 2000;  // used for special element that always needs to be above any content, but not important enough to be a special control or ui element. range 2000 - 9999
$z-ui     : 10000; // used for special ui elements that needs to be model or similar (like dialog). range 10000 >

/**
  * Mixin to return a specific PX-value for a given breakpoint-key (as defined above).
  * Mainly used for other mixins to iterate over all breakpoints and to generate CSS-Classes,
  * That way other mixins can reference neutral keys ('xs', 'sm', ...) instead of fixed PX-values.
  */
@function bp($key) { // TODO rename to something short but speaking
    @if 'xs' == $key {
        @return $xs;
    } @else if 'sm' == $key {
        @return $sm;
    } @else if 'md' == $key {
        @return $md;
    } @else if 'lg' == $key {
        @return $lg;
    }
    @return $xs;
}

// TODO create mixin for all shapings
.--primary{
    color: var(--primary-color);

    &Box { // TODO make use of this class in x.js/shaping()
        background-color: var(--primary-color-darker);
        border: 1px solid var(--primary-color);
    }
}

.--secondary{
    color: var(--secondary-color);

    &Box { // TODO make use of this class in x.js/shaping()
        background-color: var(--secondary-color-darker);
        border: 1px solid var(--secondary-color);
    }
}

.--success{
    color: var(--positive-color);

    &Box { // TODO make use of this class in x.js/shaping()
        background-color: var(--positive-color-darker);
        border: 1px solid var(--positive-color);
    }
}

.--error{
    color: var(--negative-color);

    &Box { // TODO make use of this class in x.js/shaping()
        background-color: var(--negative-color-darker);
        border: 1px solid var(--negative-color);
    }
}

$svPageHatchLineColor: rgba(127, 63, 63, .5); // TODO to specific for now, rename/make mixin/or similar
$svPageHatchBackColor: rgba(255, 0, 0, .1); // TODO to specific for now, rename/make mixin/or similar

.--hatched {
    background: repeating-linear-gradient(45deg, $svPageHatchLineColor, $svPageHatchLineColor 1px, $svPageHatchBackColor 1px, $svPageHatchBackColor 20px);
}